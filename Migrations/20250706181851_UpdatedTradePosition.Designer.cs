// <auto-generated />
using System;
using KiteConnectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KiteConnectApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250706181851_UpdatedTradePosition")]
    partial class UpdatedTradePosition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("KiteConnectApi.Models.Trading.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<double>("AveragePrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlacedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.TradePosition", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryInstrumentToken")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntryOrderId")
                        .HasColumnType("TEXT");

                    b.Property<double>("EntryPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryTradingSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("TEXT");

                    b.Property<int>("HedgeInstrumentToken")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HedgeOrderId")
                        .HasColumnType("TEXT");

                    b.Property<double>("HedgePrice")
                        .HasColumnType("REAL");

                    b.Property<string>("HedgeTradingSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("NetPremium")
                        .HasColumnType("REAL");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StopLossOrderId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("StopLossPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("Strike")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TakeProfitOrderId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TakeProfitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("PositionId");

                    b.ToTable("TradePositions");
                });
#pragma warning restore 612, 618
        }
    }
}
