// <auto-generated />
using System;
using KiteConnectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KiteConnectApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716203302_AddApiTradingDashboard")]
    partial class AddApiTradingDashboard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KiteConnectApi.Models.Trading.ApiTradeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Confidence")
                        .HasColumnType("decimal(8,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpiryDay")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("PnL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WeekStartDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ApiTradeLog");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.BrokerLevelSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("IncrementProfitBy")
                        .HasColumnType("float");

                    b.Property<double?>("LockProfitAt")
                        .HasColumnType("float");

                    b.Property<double?>("MinimumProfitToLock")
                        .HasColumnType("float");

                    b.Property<double?>("OverallStopLoss")
                        .HasColumnType("float");

                    b.Property<double?>("OverallTarget")
                        .HasColumnType("float");

                    b.Property<int>("StrategyId")
                        .HasColumnType("int");

                    b.Property<double?>("TrailSLBy")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId")
                        .IsUnique();

                    b.ToTable("BrokerLevelSettings");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.ExecutionSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoSquareoff")
                        .HasColumnType("bit");

                    b.Property<int>("DelayEntryBySeconds")
                        .HasColumnType("int");

                    b.Property<int>("EntryOrderType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EntryTime")
                        .HasColumnType("time");

                    b.Property<int>("ExitOrderType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ExitTime")
                        .HasColumnType("time");

                    b.Property<double?>("LimitBuffer")
                        .HasColumnType("float");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("QuantityMultiplier")
                        .HasColumnType("int");

                    b.Property<int>("StrategyId")
                        .HasColumnType("int");

                    b.Property<int>("TargetSLRefPrice")
                        .HasColumnType("int");

                    b.Property<string>("TradingDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId")
                        .IsUnique();

                    b.ToTable("ExecutionSettings");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.HedgeConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AutoAdjustHedge")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HedgePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HedgePoints")
                        .HasColumnType("int");

                    b.Property<decimal>("HedgeRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HedgeTransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HedgeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxHedgePrice")
                        .HasColumnType("int");

                    b.Property<int>("MinHedgePrice")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrategyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId")
                        .HasDatabaseName("IX_HedgeConfiguration_StrategyId");

                    b.ToTable("HedgeConfigurations");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.Leg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OptionType")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QuantityLots")
                        .HasColumnType("int");

                    b.Property<int>("StrategyId")
                        .HasColumnType("int");

                    b.Property<double>("StrikePrice")
                        .HasColumnType("float");

                    b.Property<string>("UnderlyingAsset")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.ManualTradingViewAlert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Signal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrategyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ManualTradingViewAlerts");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.NiftyOptionStrategyConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AllocatedMargin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("AllowMultipleSignals")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedSignals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AutoSquareOffOnExpiry")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EntryLimitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EntryOrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryTime")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExitAndReenterProfitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExitAndReenterProfitPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExitTime")
                        .HasColumnType("int");

                    b.Property<int>("ExpirySquareOffTimeMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HedgeDistancePoints")
                        .HasColumnType("int");

                    b.Property<bool>("HedgeEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("HedgePremiumPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HedgeRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HedgeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastExitReentryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LockProfitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LockProfitPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ManualExecutionTimeoutMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxDailyLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxPositionSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxTradesPerDay")
                        .HasColumnType("int");

                    b.Property<int>("MinReentryDelayMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("MoveStopLossToEntryPriceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MoveStopLossToEntryPricePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotifyOnEntry")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyOnExit")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyOnProfit")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyOnStopLoss")
                        .HasColumnType("bit");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverallPositionStopLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("StopLossPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StrategyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TakeProfitPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TargetPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TrailStopLossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TrailStopLossPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnderlyingInstrument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseDynamicQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("UseNearestWeeklyExpiry")
                        .HasColumnType("bit");

                    b.Property<bool>("UseOrderProtection")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NiftyOptionStrategyConfigs");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.NotificationPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("EventTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.OptionsHistoricalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("AskPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BidAskSpread")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BidPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataSource")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Delta")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Gamma")
                        .HasColumnType("decimal(8,4)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpliedVolatility")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("Interval")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OpenInterest")
                        .HasColumnType("bigint");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.Property<decimal?>("Theta")
                        .HasColumnType("decimal(8,4)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Underlying")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Vega")
                        .HasColumnType("decimal(8,4)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_OptionsHistoricalData_Timestamp");

                    b.HasIndex("TradingSymbol", "Timestamp")
                        .HasDatabaseName("IX_OptionsHistoricalData_Symbol_Timestamp");

                    b.HasIndex("Underlying", "Strike", "OptionType", "ExpiryDate")
                        .HasDatabaseName("IX_OptionsHistoricalData_Underlying_Strike_Type_Expiry");

                    b.ToTable("OptionsHistoricalData");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.OptionsTradePosition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("EntryPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExitOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExitReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrumentToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHedge")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LockedProfitLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MainPositionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PnL")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PnLPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ProfitLocked")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Signal")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StopLossPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StrategyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TrailingStopLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_OptionsTradePosition_ExpiryDate");

                    b.HasIndex("StrategyId", "Signal", "Status")
                        .HasDatabaseName("IX_OptionsTradePosition_Strategy_Signal_Status");

                    b.ToTable("OptionsTradePositions");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LimitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradingSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TriggerPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Validity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.PendingAlert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlertJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExecutionResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Signal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StrategyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpiryTime")
                        .HasDatabaseName("IX_PendingAlert_ExpiryTime");

                    b.HasIndex("StrategyId", "Status")
                        .HasDatabaseName("IX_PendingAlert_Strategy_Status");

                    b.ToTable("PendingAlerts");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.RiskManagementRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ActionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTriggered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxTriggers")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrategyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TriggerAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TriggerCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TriggerCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TriggerPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId", "IsEnabled")
                        .HasDatabaseName("IX_RiskManagementRule_Strategy_Enabled");

                    b.ToTable("RiskManagementRules");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.ScreenerCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("MaxVolume")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("MinVolume")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("WatchlistSymbols")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScreenerCriterias");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.Strategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.StrategyConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AllocatedCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrategyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StrategyConfigs");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.TradePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HedgeTradingSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PnL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Realised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Signal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopLossOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrategyConfigId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradingSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Unrealised")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TradePositions");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.BrokerLevelSettings", b =>
                {
                    b.HasOne("KiteConnectApi.Models.Trading.Strategy", "Strategy")
                        .WithOne("BrokerLevelSettings")
                        .HasForeignKey("KiteConnectApi.Models.Trading.BrokerLevelSettings", "StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.ExecutionSettings", b =>
                {
                    b.HasOne("KiteConnectApi.Models.Trading.Strategy", "Strategy")
                        .WithOne("ExecutionSettings")
                        .HasForeignKey("KiteConnectApi.Models.Trading.ExecutionSettings", "StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.Leg", b =>
                {
                    b.HasOne("KiteConnectApi.Models.Trading.Strategy", "Strategy")
                        .WithMany("Legs")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.StrategyConfig", b =>
                {
                    b.OwnsOne("KiteConnectApi.Models.Trading.RiskParameters", "RiskParameters", b1 =>
                        {
                            b1.Property<string>("StrategyConfigId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("MaxExposure")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("MaxLoss")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("MaxOpenPositions")
                                .HasColumnType("int");

                            b1.Property<decimal>("MaxProfit")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("StrategyConfigId");

                            b1.ToTable("StrategyConfigs");

                            b1.WithOwner()
                                .HasForeignKey("StrategyConfigId");
                        });

                    b.Navigation("RiskParameters")
                        .IsRequired();
                });

            modelBuilder.Entity("KiteConnectApi.Models.Trading.Strategy", b =>
                {
                    b.Navigation("BrokerLevelSettings");

                    b.Navigation("ExecutionSettings");

                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
